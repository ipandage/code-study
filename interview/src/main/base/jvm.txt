jvm 是如何分配和回收内存
http://www.cnblogs.com/magialmoon/p/jvm-memory-and-gc.html

jvm问题分析

堆内存转储工具
Heap Dump 是一个二进制文件，保存了jvm某一时刻堆中对象的内存使用情况，可以使用MAT，IBM Heap Analyzer这类工具分析
MAT设计的初衷是帮助用户找出内存泄漏的原因

线程转储工具
jstack
当服务器难以接受请求，应用程序响应极慢或者不响应，观察JVM“僵死”现象时，应当考虑JVM是否遇到资源瓶颈了。
操作步骤
1.获取线程转储信息
2.排除死锁
3.定位资源瓶颈
locked 确认大批请求在临界区 等待数据库链接 ，有时需要确认是否等待相同资源，数据库连接池资源遇到了瓶颈
4.判断引起资源瓶颈的程序来源，对症下药

值得关注的线程状态
死锁，Deadlock（重点关注）
执行中，Runnable
等待资源，Waiting on condition（重点关注）
等待获取监视器，Waiting on monitor entry（重点关注）
暂停，Suspended
对象等待中，Object.wait() 或 TIMED_WAITING
阻塞，Blocked（重点关注）
停止，Parked

类加载过程 http://blog.csdn.net/u011955252/article/details/49643503
加载 连接（验证 准备 解析） 初始化
加载 class二进制文件加载到内存
连接-验证 验证class文件格式是否正确，语法是否正确，字节码是否正确，二进制内容是否兼容
连接-准备 为类的静态变量分配空间，并赋予默认初始值
连接-解析 将class文件中的符号引用变为直接引用
初始化，为类的静态变量赋予正确的初始值，只有在类首次使用的时候才会初始化




